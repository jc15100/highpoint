"""
Django settings for highpointServer project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import io
import os
from urllib.parse import urlparse

from pathlib import Path
import environ
from google.cloud import secretmanager
from google.oauth2 import service_account

import google.cloud.logging

# Instantiates a client
client = google.cloud.logging.Client()

# Retrieves a Cloud Logging handler based on the environment
# you're running in and integrates the handler with the
# Python logging module. By default this captures all logs
# at INFO level and higher
client.setup_logging()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

env = environ.Env(DEBUG=(bool, False))
env_file = os.path.join(BASE_DIR, ".env")

SECRET_KEY = None

# SECURITY WARNING: don't run with debug turned on in production!
# Change this to "False" when you are ready for production
DEBUG = True

if os.path.isfile(env_file):
    # Use a local secret file, if provided
    env.read_env(env_file)
elif os.getenv("TRAMPOLINE_CI", None):
    # Create local settings if running with CI, for unit testing
    placeholder = (
        f"SECRET_KEY=a\n"
        f"DATABASE_URL=sqlite://{os.path.join(BASE_DIR, 'db.sqlite3')}"
    )
    env.read_env(io.StringIO(placeholder))
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    # Pull secrets from Secret Manager
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(name=name).payload.data.decode("UTF-8")

    env.read_env(io.StringIO(payload))
else:
    print("No Google Cloud setup, using hardcoded key")
    SECRET_KEY = "django-insecure-#=b2b6b14w+v=(+u_9flgw^2^lcg45q!=)u!4-5$!obs!ma&!@"

if SECRET_KEY is None:
    SECRET_KEY = env("SECRET_KEY")

APPENGINE_URL = env("APPENGINE_URL", default=None)
if APPENGINE_URL:
    # Ensure a scheme is present in the URL before it's processed.
    if not urlparse(APPENGINE_URL).scheme:
        APPENGINE_URL = f"https://{APPENGINE_URL}"

    ALLOWED_HOSTS = [urlparse(APPENGINE_URL).netloc]
    CSRF_TRUSTED_ORIGINS = [APPENGINE_URL]
    SECURE_SSL_REDIRECT = True
else:
    ALLOWED_HOSTS = ["*"]

STRIPE_TEST_PUBLIC_KEY = 'pk_test_51H1EzYAXG1Cll3zzr1d6zcPexdHpcVeRtfO1HqHqEOiVBzbqW5YQVm32wFwmvv4eklY7jVqk3hPbRDxOjYopBA0K00ZzfGXgK'
STRIPE_TEST_SECRET_KEY = 'sk_test_51H1EzYAXG1Cll3zzr7OuQE0sVPjoqCWNKz8Su6GF4zeyDXIWUEAaZtrmVB6DwCpezpnLlYLh7C8dixOwsuwS6P0500IRBkIuY'
STRIPE_LIVE_MODE = False
DJSTRIPE_WEBHOOK_SECRET = 'whsec_xxx'
DJSTRIPE_FOREIGN_KEY_TO_FIELD = 'djstripe_id'

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'rest_framework',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'djstripe',
    'video_processor.apps.VideoProcessorConfig',
]

MIDDLEWARE = [
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.media",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
DATABASES = {}

# If the flag as been set, configure to use proxy
if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432
# Use a in-memory sqlite3 database when testing in CI systems
elif os.getenv("TRAMPOLINE_CI", None) or DEBUG == True:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }
else:
    DATABASES = {"default": env.db()}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# Works for Django > 4.0
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            'bucket_name': 'pivotal-valve-407719.appspot.com',
            'blob_chunk_size': 500*1024*256,
        }
    },
    "staticfiles": {
        "BACKEND": "storages.backends.gcloud.GoogleCloudStorage",
        "OPTIONS": {
            'bucket_name': 'pivotal-valve-407719.appspot.com',
            'blob_chunk_size': 500*1024*256,
        }
    },
}

# Needed for Django < 4.0
DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
STATICFILES_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"

MEDIA_URL = "media/"
MEDIA_ROOT = BASE_DIR / 'media'

# storage
GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    os.path.join(BASE_DIR, 'pivotal-valve-407719-6b57d2500253.json')
)
CREDENTIALS_JSON = os.path.join(BASE_DIR, 'pivotal-valve-407719-6b57d2500253.json')

print("GS Credentials loaded: " + str(GS_CREDENTIALS))

API_ACCESS_ENDPOINT = 'https://storage.googleapis.com'
GS_BUCKET_NAME = 'pivotal-valve-407719.appspot.com'
GS_MAX_MEMORY_SIZE = 5000*1024*256
GS_BLOB_CHUNK_SIZE = 5000*1024*256

STATIC_URL = 'https://storage.googleapis.com/{}/'.format(GS_BUCKET_NAME)

STATICFILES_DIRS = [
      os.path.join(BASE_DIR, "static"), 
]

#STATIC_ROOT = "staticfiles"

DATA_UPLOAD_MAX_MEMORY_SIZE = 5000*1024*256
FILE_UPLOAD_MAX_MEMORY_SIZE = 5000*1024*256

# Login/Logout URLs
LOGIN_REDIRECT_URL = '/uploader'
LOGOUT_REDIRECT_URL = '/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FREE_QUOTA = 100
